plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'jacoco'
    id 'checkstyle'
}

group 'com.jpasikainen'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.7.1'
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainClass = 'com.jpasikainen.tira.Game'
    applicationDefaultJvmArgs = [
            "--module-path=/usr/share/java/lib",
            "--add-modules=javafx.controls,javafx.fxml"]
}

mainClassName = '$moduleName/com.jpasikainen.tira.Game'

javafx {
    version = '17'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

// Tasks
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/jpasikainen/tira/gui/**', 'com/jpasikainen/tira/Game.class'])
        }))
    }
}

checkstyle {
    ignoreFailures = true
    checkstyleMain.source = "src"
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.jpasikainen.tira.Game'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

checkstyleMain.exclude('main/java/com/jpasikainen/tira/gui/*.java')
checkstyleMain.exclude('test/java/com/jpasikainen/tira/*')
